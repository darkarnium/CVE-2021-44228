"""
An exceptionally terrible, and quickly slapped together script to read SARIF and
output a list of affected files in a tree.
"""
import sys
import json

try:
    sarif = json.loads("\n".join(sys.stdin.readlines()))
except json.JSONDecodeError as err:
    print(f"ERROR: Unable to read SARIF from STDIN: {err}")
    sys.exit(1)

runs = sarif.get("runs", [])

for r in runs:
    files = r.get("artifacts", [])
    findings = {}

    for result in r.get("results", []):
        # This would be much nicer with JMESPath.
        location = result.get("locations", [])[0]
        location = location.get("physicalLocation", {})
        location = location.get("artifactLocation", {})

        index = location.get("index")
        path = str()
        # Construct a virtual file path based on the findings.
        while True:
            name = files[index].get("location", {}).get("uri")
            path = f"{name}!{path}"
            index = files[index].get("parentIndex")

            if index is None:
                break

        # Clean up file path and add the findings.
        path = path.rstrip("!")
        if path not in findings:
            findings[path] = set()

        # Add rule identifiers.
        findings[path].add(result.get("ruleId"))

print(f"{'-' * 20} FOUND {'-' * 20}")

findings = dict(sorted(findings.items()))
for path, finding in findings.items():
    files = path.split("!")

    for index, file in enumerate(files):
        print(f"{'    ' * index} - {file}", end="")

        if index == (len(files) - 1):
            print(f" {list(finding)}")
            print()
        else:
            print()
